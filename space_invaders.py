# -*- coding: utf-8 -*-
"""space_invaders.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MxLaP2E62hsftSFbcUdB-5n97X9yT10b
"""

import curses
import random
import time

# Constants
PLAYER_CHAR = 'A'
ALIEN_CHAR = 'X'
SHOT_CHAR = '|'
BOMB_CHAR = 'V'
GROUND_CHAR = '-'
WIDTH = 50
HEIGHT = 20
ALIEN_ROWS = 3
ALIEN_COLS = 10

# Initialize the screen
stdscr = curses.initscr()
curses.noecho()
curses.cbreak()
stdscr.keypad(True)
stdscr.nodelay(True)
curses.curs_set(0)

# Initialize the colors
curses.start_color()
curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)
curses.init_pair(2, curses.COLOR_GREEN, curses.COLOR_BLACK)
curses.init_pair(3, curses.COLOR_RED, curses.COLOR_BLACK)

# Game variables
score = 0
max_shots = 3
shots_fired = 0
num_aliens = ALIEN_ROWS * ALIEN_COLS

# Player
player = {'x': WIDTH // 2, 'y': HEIGHT - 1, 'char': PLAYER_CHAR}

# Aliens
aliens = []
for row in range(ALIEN_ROWS):
    for col in range(ALIEN_COLS):
        alien = {'x': col * 4 + 2, 'y': row + 1, 'char': ALIEN_CHAR}
        aliens.append(alien)

# Shots
shots = [{'x': -1, 'y': -1, 'char': SHOT_CHAR} for _ in range(max_shots)]

# Bombs
bombs = [{'x': -1, 'y': -1, 'char': BOMB_CHAR} for _ in range(num_aliens)]

# Game loop
direction = 1  # 1 for right, -1 for left
alien_speed = 3
shot_speed = 1
bomb_speed = 2
bomb_chance = 1  # 1% chance of dropping a bomb
quit_game = False

def draw_entity(entity):
    stdscr.addch(entity['y'], entity['x'], entity['char'])

def erase_entity(entity):
    stdscr.addch(entity['y'], entity['x'], ' ')

def draw_ground():
    stdscr.addstr(HEIGHT, 0, GROUND_CHAR * WIDTH)

def draw_score():
    stdscr.addstr(0, 0, f"Score: {score}", curses.color_pair(1))

def check_collision(entity1, entity2):
    return entity1['x'] == entity2['x'] and entity1['y'] == entity2['y']

while not quit_game:
    # Clear the screen
    stdscr.clear()

    # Get user input
    key = stdscr.getch()
    if key == ord('q'):
        quit_game = True
    elif key == curses.KEY_LEFT:
        if player['x'] > 0:
            player['x'] -= 1
    elif key == curses.KEY_RIGHT:
        if player['x'] < WIDTH - 1:
            player['x'] += 1
    elif key == ord(' '):
        if shots_fired < max_shots:
            for shot in shots:
                if shot['y'] == -1:
                    shot['x'] = player['x']
                    shot['y'] = player['y'] - 1
                    shots_fired += 1
                    break

    # Move shots
    for shot in shots:
        if shot['y'] >= 0:
            erase_entity(shot)
            shot['y'] -= shot_speed
            if shot['y'] < 0:
                shot['y'] = -1
                shots_fired -= 1
            else:
                draw_entity(shot)

    # Move aliens and drop bombs
    for i, alien in enumerate(aliens):
        if alien['x'] + direction < 0 or alien['x'] + direction >= WIDTH:
            direction *= -1
            for alien in aliens:
                alien['y'] += 1
        else:
            erase_entity(alien)
            alien['x'] += direction
            draw_entity(alien)

            # Alien drops a bomb
            if random.randint(1, 100) <= bomb_chance and bombs[i]['y'] == -1:
                bombs[i]['x'] = alien['x']
                bombs[i]['y'] = alien['y'] + 1

    # Move bombs
    for bomb in bombs:
        if bomb['y'] >= 0:
            erase_entity(bomb)
            bomb['y'] += bomb_speed
            if bomb['y'] >= HEIGHT:
                bomb['y'] = -1
            else:
                draw_entity(bomb)

            # Check collision with player
            if check_collision(bomb, player):
                quit_game = True

    # Check collision between shots and aliens
    for shot in shots:
        if shot['y'] >= 0:
            for alien in aliens:
                if check_collision(shot, alien):
                    erase_entity(alien)
                    alien['x'] = -1
                    alien['y'] = -1
                    score += 20
                    num_aliens -= 1
                    draw_score()
                    break

    # Draw ground
    draw_ground()

    # Draw player
    draw_entity(player)

    # Draw score
    draw_score()

    stdscr.refresh()
    time.sleep(0.1)  # 100ms delay

# End the game
curses.nocbreak()
stdscr.keypad(False)
curses.echo()
curses.endwin()
print(f"Game over! Final score: {score}")

